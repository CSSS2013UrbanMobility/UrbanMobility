;;source file for routing procedures

;individuals-own[
; prefered-paths

; next-travel-start
; next-travel-type

; is-travelling?

; current-edge
; remaining-distance-in-edge

; current-position ;couple of coordinates
;]




to move-agent
  ifelse is-travelling?[
    make-a-step
  ][
    if ticks = next-travel-start [
      ;set travel type and so one : decision tree
      ;take-decision 
      
      ;;begin a journey
      ;;check the type of travel, if sub or foot, shortest path routing
      ;;if car, first prefered path routing
      ;;launch the agent in the first edge of its adventure by setting current-edge first one of travel and setting position in edge 0.
     
     
      set is-travelling? true
      set times-rerouted 0
    ]
  ]
  
  
end

to make-a-step
  
  set remaining-time-in-tick tick-time-interval
  ;;need to check if time of step allows to go to next edge.
  ;;seems current if time step is around 5 minutes.
  
  ;;first make a step in the current edge
  while [remaining-time-in-tick > 0] [
    move-in-current-edge
  ]
end



;;make agent advance in current edge
;;check rerouting if needed.
to move-in-current-edge
    ;;then check if end of edge has been reached 
    ;if yes
    ; first test if destination has been reached
    ; if needed (case of car, launch re-route procedure). Anyway change of edge
    let possible-distance-in-edge ([possible-speed] of current-edge) * tick-time-interval
    ifelse possible-distance-in-edge < remaining-distance-in-edge [
      
      ;;simple move : the agent don't finish the edge, advance just in one step without changing current edge
      ;;don't forget update remaining distance
      
      set remaining-time-in-tick 0
      set remaining-distance-in-edge remaining-distance-in-edge - possible-distance-in-edge
      fd possible-distance-in-edge
    ][
      ;; the other case go to end of edge
      ;; decrease remaining time by time to reach it
      ;; check is travel is finished
      ;; check reroute conditions : do the rerouting if needed
      ;; update current-edge
      
      fd remaining-distance-in-edge
      ;maybe at this point need some position correction? by :
      ;move-to one-of vertices with-min [distance myself]
      set remaining-time-in-tick remaining-time-in-tick - (remaining-distance-in-edge / ([possible-speed] of current-edge))
           
      ;;reroute procedure.
      reroute
      
    ]
    
end


to reroute
  ;;first of all check condition
  let hypothetical-next-edge first current-path
  ifelse true [;congestion-on-edge >= individual-tolerance-for-congestion
    ;;reroute procedure : find in 
    
  ]
  [
    set current-edge hypothetical-next-edge
    set current-path but-first current-path
    set remaining-distance-in-edge [link-length] of current-edge
  ]
end



;;road procedure to get current possible speed
;;implements an affine by parts law
to-report possible-speed
  let c 0.5;congestion-on-edge
  if c < begin-congestion-treshold [report max-speed]
  ifelse c < max-congestion-treshold [report (max-speed - min-congestion-speed) * (max-congestion-treshold - c) + max-speed]
  [report min-congestion-speed]
end
